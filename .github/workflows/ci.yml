name: CI # 部署

on: # 触发条件
  push:
    branches:
      - master # 推送到 master 分支（这里的分支名很重要，不要弄错了

  workflow_dispatch: # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 1. 检出仓库 #  Checkout
        uses: actions/checkout@v2
        with:
          clean: false

      - name: 2. 安装 Node # Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x" # 使用适合你Hexo项目的Node.js版本

      - name: 3. 安装 Hexo # Install Hexo
        run: |
          npm install hexo-cli -g

      - name: 4. 缓存 Node 插件 # Cache Modules
        uses: actions/cache@v1
        id: cache-modules
        with:
          path: node_modules
          key: ${{runner.OS}}-${{hashFiles('**/package-lock.json')}}

      - name: 5. 安装主题 # Install Theme
        run: |
          git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly
          npm install hexo-renderer-pug hexo-renderer-stylus --save

      - name: Install Dependencies # 5. 安装依赖  如果没有缓存或 插件有更新，则安装插件
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: | # **如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json**
          npm ci

      - name: Generate # 6. 生成静态文件，其中hexo algolia为algolia搜索，hexo gulp为全站压缩，如果没安装则按需删除
        run: |
          hexo clean
          hexo generate

      - name: Deploy GitHub Pages # 7. 部署到 github page：github.io仓库中保存每次提交日志 其中clean-exclude为hexo-seo-autopush插件配置，如果没安装则按需删除
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: main # 部署分支，通常是main或master
          folder: public # Hexo生成的静态文件所在的文件夹
          access_token: ${{ secrets.ACCESS_TOKEN }} # 你的GitHub个人访问令牌




#      - name: 7. 部署到 其他的仓库 github page # Deploy：github.io仓库中日志只保留最新
#        run: |
#          cd ./public
#          git init
#          git config --global user.name '${{ secrets.GITHUBUSERNAME }}'
#          git config --global user.email '${{ secrets.GITHUBEMAIL }}'
#          git add .
#          git commit -m "${{ github.event.head_commit.message }} $(date +"%Z %Y-%m-%d %A %H:%M:%S") Updated By Github Actions"
#          git push --force --quiet "https://${{ secrets.GITHUBUSERNAME }}:${{ secrets.GITHUBTOKEN }}@github.com/${{ secrets.GITHUBUSERNAME }}/${{ secrets.GITHUBUSERNAME }}.github.io.git" master:main

#      - name: Push Server  #8. 推送到服务器私有仓库
#        uses: easingthemes/ssh-deploy@main
#        env:
#          SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }} # 服务器生成的私钥，例如 -----BEGIN RSA PRIVATE KEY-----xxxx-----END RSA PRIVATE KEY-----
#          ARGS: "-avz --delete" # rsync参数
#          SOURCE: "public/"
#          REMOTE_HOST: ${{ secrets.SERVER_HOST }} # 服务器ip地址，例如 1.2.3.4
#          REMOTE_USER: ${{ secrets.SERVER_USER }} # 登录用户，例如 ubuntu 注意应拥有该文件夹的权限，可以在root下为用户赋权 chown -R ubuntu:755 /www/wwwroot/hexo
#          TARGET: ${{ secrets.SERVER_PATH }}    # 服务器目录，例如 /www/wwwroot/hexo
#          EXCLUDE: ".git/,.user.ini"            # 排除源路径中.git/ 目标路径中.user.ini 这俩不做同步操作
#
#      - name: Refresh CDN # 9. 刷新CDN
#        run: |
#          pip install --upgrade pip
#          pip install tencentcloud-sdk-python
#          pip install tencentcloud-sdk-python-cdn
#          python3 cdn.py

#      - name: Sync to Gitee  # 10. 备份Gitee
#        uses: wearerequired/git-mirror-action@master
#        env:
#          # 注意在 Settings->Secrets 配置 GITEE_RSA_PRIVATE_KEY
#          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}
#        with:
#          # 注意替换为你的 GitHub 源仓库地址
#          source-repo: git@github.com:GC-ZF/Blog-Backups.git
#          # 注意替换为你的 Gitee 目标仓库地址
#          destination-repo: git@gitee.com:gc-zhang/blog-backups.git